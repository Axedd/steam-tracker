// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: appids.sql

package db

import (
	"context"
)

const createAppID = `-- name: CreateAppID :one
INSERT INTO appids (appid, name, logo_url)
VALUES ($1, $2, $3)
RETURNING
  appid,
  name,
  logo_url
`

type CreateAppIDParams struct {
	Appid   int32  `json:"appid"`
	Name    string `json:"name"`
	LogoUrl string `json:"logo_url"`
}

func (q *Queries) CreateAppID(ctx context.Context, arg CreateAppIDParams) (Appid, error) {
	row := q.queryRow(ctx, q.createAppIDStmt, createAppID, arg.Appid, arg.Name, arg.LogoUrl)
	var i Appid
	err := row.Scan(&i.Appid, &i.Name, &i.LogoUrl)
	return i, err
}

const deleteAppID = `-- name: DeleteAppID :exec
DELETE FROM appids
WHERE appid = $1
`

func (q *Queries) DeleteAppID(ctx context.Context, appid int32) error {
	_, err := q.exec(ctx, q.deleteAppIDStmt, deleteAppID, appid)
	return err
}

const getAppIDByID = `-- name: GetAppIDByID :one
SELECT
  appid,
  name,
  logo_url
FROM appids
WHERE appid = $1
`

func (q *Queries) GetAppIDByID(ctx context.Context, appid int32) (Appid, error) {
	row := q.queryRow(ctx, q.getAppIDByIDStmt, getAppIDByID, appid)
	var i Appid
	err := row.Scan(&i.Appid, &i.Name, &i.LogoUrl)
	return i, err
}

const listAppIDs = `-- name: ListAppIDs :many
SELECT
    appid,
    name,
    logo_url
FROM appids
ORDER BY name
`

func (q *Queries) ListAppIDs(ctx context.Context) ([]Appid, error) {
	rows, err := q.query(ctx, q.listAppIDsStmt, listAppIDs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Appid
	for rows.Next() {
		var i Appid
		if err := rows.Scan(&i.Appid, &i.Name, &i.LogoUrl); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
