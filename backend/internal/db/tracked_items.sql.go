// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: tracked_items.sql

package db

import (
	"context"
	"encoding/json"
	"time"

	"github.com/lib/pq"
)

const createItem = `-- name: CreateItem :one
INSERT INTO tracked_items (name, query, filters)
VALUES ($1, $2, $3)
RETURNING id, name, query, filters AS steam_params, sent_ids, active, created_at
`

type CreateItemParams struct {
	Name    string          `json:"name"`
	Query   string          `json:"query"`
	Filters json.RawMessage `json:"filters"`
}

type CreateItemRow struct {
	ID          int32           `json:"id"`
	Name        string          `json:"name"`
	Query       string          `json:"query"`
	SteamParams json.RawMessage `json:"steam_params"`
	SentIds     []string        `json:"sent_ids"`
	Active      bool            `json:"active"`
	CreatedAt   time.Time       `json:"created_at"`
}

func (q *Queries) CreateItem(ctx context.Context, arg CreateItemParams) (CreateItemRow, error) {
	row := q.queryRow(ctx, q.createItemStmt, createItem, arg.Name, arg.Query, arg.Filters)
	var i CreateItemRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Query,
		&i.SteamParams,
		pq.Array(&i.SentIds),
		&i.Active,
		&i.CreatedAt,
	)
	return i, err
}

const deleteItem = `-- name: DeleteItem :exec
DELETE FROM tracked_items
WHERE id = $1
`

func (q *Queries) DeleteItem(ctx context.Context, id int32) error {
	_, err := q.exec(ctx, q.deleteItemStmt, deleteItem, id)
	return err
}

const getItemByID = `-- name: GetItemByID :one
SELECT id, name, query, filters AS steam_params, sent_ids, active, created_at
FROM tracked_items
WHERE id = $1
`

type GetItemByIDRow struct {
	ID          int32           `json:"id"`
	Name        string          `json:"name"`
	Query       string          `json:"query"`
	SteamParams json.RawMessage `json:"steam_params"`
	SentIds     []string        `json:"sent_ids"`
	Active      bool            `json:"active"`
	CreatedAt   time.Time       `json:"created_at"`
}

func (q *Queries) GetItemByID(ctx context.Context, id int32) (GetItemByIDRow, error) {
	row := q.queryRow(ctx, q.getItemByIDStmt, getItemByID, id)
	var i GetItemByIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Query,
		&i.SteamParams,
		pq.Array(&i.SentIds),
		&i.Active,
		&i.CreatedAt,
	)
	return i, err
}

const listItems = `-- name: ListItems :many
SELECT id, name, query, filters AS steam_params, sent_ids, active, created_at
FROM tracked_items
WHERE active = true
`

type ListItemsRow struct {
	ID          int32           `json:"id"`
	Name        string          `json:"name"`
	Query       string          `json:"query"`
	SteamParams json.RawMessage `json:"steam_params"`
	SentIds     []string        `json:"sent_ids"`
	Active      bool            `json:"active"`
	CreatedAt   time.Time       `json:"created_at"`
}

func (q *Queries) ListItems(ctx context.Context) ([]ListItemsRow, error) {
	rows, err := q.query(ctx, q.listItemsStmt, listItems)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListItemsRow
	for rows.Next() {
		var i ListItemsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Query,
			&i.SteamParams,
			pq.Array(&i.SentIds),
			&i.Active,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateItem = `-- name: UpdateItem :one
UPDATE tracked_items
SET name = $2,
    query = $3,
    filters = $4,
    active = $5
WHERE id = $1
RETURNING id, name, query, filters AS steam_params, sent_ids, active, created_at
`

type UpdateItemParams struct {
	ID      int32           `json:"id"`
	Name    string          `json:"name"`
	Query   string          `json:"query"`
	Filters json.RawMessage `json:"filters"`
	Active  bool            `json:"active"`
}

type UpdateItemRow struct {
	ID          int32           `json:"id"`
	Name        string          `json:"name"`
	Query       string          `json:"query"`
	SteamParams json.RawMessage `json:"steam_params"`
	SentIds     []string        `json:"sent_ids"`
	Active      bool            `json:"active"`
	CreatedAt   time.Time       `json:"created_at"`
}

func (q *Queries) UpdateItem(ctx context.Context, arg UpdateItemParams) (UpdateItemRow, error) {
	row := q.queryRow(ctx, q.updateItemStmt, updateItem,
		arg.ID,
		arg.Name,
		arg.Query,
		arg.Filters,
		arg.Active,
	)
	var i UpdateItemRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Query,
		&i.SteamParams,
		pq.Array(&i.SentIds),
		&i.Active,
		&i.CreatedAt,
	)
	return i, err
}
