// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: steam_params.sql

package db

import (
	"context"
	"database/sql"

	"github.com/sqlc-dev/pqtype"
)

const addSteamParam = `-- name: AddSteamParam :exec
INSERT INTO steam_param_defs (key, label, type, options, default_value, help_text, appid)
VALUES ($1, $2, $3, $4, $5, $6, $7)
`

type AddSteamParamParams struct {
	Key          string                `json:"key"`
	Label        string                `json:"label"`
	Type         string                `json:"type"`
	Options      pqtype.NullRawMessage `json:"options"`
	DefaultValue sql.NullString        `json:"default_value"`
	HelpText     sql.NullString        `json:"help_text"`
	Appid        sql.NullInt32         `json:"appid"`
}

func (q *Queries) AddSteamParam(ctx context.Context, arg AddSteamParamParams) error {
	_, err := q.exec(ctx, q.addSteamParamStmt, addSteamParam,
		arg.Key,
		arg.Label,
		arg.Type,
		arg.Options,
		arg.DefaultValue,
		arg.HelpText,
		arg.Appid,
	)
	return err
}

const getGlobalParams = `-- name: GetGlobalParams :many
SELECT 
  key, label, type, options, default_value, help_text, appid
FROM steam_param_defs
WHERE appid IS NULL
`

func (q *Queries) GetGlobalParams(ctx context.Context) ([]SteamParamDef, error) {
	rows, err := q.query(ctx, q.getGlobalParamsStmt, getGlobalParams)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SteamParamDef
	for rows.Next() {
		var i SteamParamDef
		if err := rows.Scan(
			&i.Key,
			&i.Label,
			&i.Type,
			&i.Options,
			&i.DefaultValue,
			&i.HelpText,
			&i.Appid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getParamsByAppID = `-- name: GetParamsByAppID :many
SELECT 
  key, label, type, options, default_value, help_text, appid
FROM steam_param_defs
WHERE appid = $1
`

func (q *Queries) GetParamsByAppID(ctx context.Context, appid sql.NullInt32) ([]SteamParamDef, error) {
	rows, err := q.query(ctx, q.getParamsByAppIDStmt, getParamsByAppID, appid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SteamParamDef
	for rows.Next() {
		var i SteamParamDef
		if err := rows.Scan(
			&i.Key,
			&i.Label,
			&i.Type,
			&i.Options,
			&i.DefaultValue,
			&i.HelpText,
			&i.Appid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeSteamParam = `-- name: RemoveSteamParam :exec
DELETE FROM steam_param_defs
WHERE key = $1
`

func (q *Queries) RemoveSteamParam(ctx context.Context, key string) error {
	_, err := q.exec(ctx, q.removeSteamParamStmt, removeSteamParam, key)
	return err
}

const updateParamByKey = `-- name: UpdateParamByKey :one
UPDATE steam_param_defs
SET key = $2,
    label = $3,
    options = $4,
    default_value = $5,
    help_text = $6,
    appid = $7
WHERE key = $1
RETURNING key, label, type, options, default_value, help_text, appid
`

type UpdateParamByKeyParams struct {
	Key          string                `json:"key"`
	Key_2        string                `json:"key_2"`
	Label        string                `json:"label"`
	Options      pqtype.NullRawMessage `json:"options"`
	DefaultValue sql.NullString        `json:"default_value"`
	HelpText     sql.NullString        `json:"help_text"`
	Appid        sql.NullInt32         `json:"appid"`
}

func (q *Queries) UpdateParamByKey(ctx context.Context, arg UpdateParamByKeyParams) (SteamParamDef, error) {
	row := q.queryRow(ctx, q.updateParamByKeyStmt, updateParamByKey,
		arg.Key,
		arg.Key_2,
		arg.Label,
		arg.Options,
		arg.DefaultValue,
		arg.HelpText,
		arg.Appid,
	)
	var i SteamParamDef
	err := row.Scan(
		&i.Key,
		&i.Label,
		&i.Type,
		&i.Options,
		&i.DefaultValue,
		&i.HelpText,
		&i.Appid,
	)
	return i, err
}
